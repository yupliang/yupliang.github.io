<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Liang's Blog]]></title>
  <link href="http://yupliang.github.io/atom.xml" rel="self"/>
  <link href="http://yupliang.github.io/"/>
  <updated>2014-06-05T08:48:40+08:00</updated>
  <id>http://yupliang.github.io/</id>
  <author>
    <name><![CDATA[yupliang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RAC]]></title>
    <link href="http://yupliang.github.io/blog/2014/06/05/rac/"/>
    <updated>2014-06-05T08:42:27+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/06/05/rac</id>
    <content type="html"><![CDATA[<p>核心英雄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAC RACSignal </span></code></pre></td></tr></table></div></figure>


<p>样板代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAC(self.clickbutton, enabled) = [RACSignal combineLatest:@[
</span><span class='line'>                                                                self.username.rac_textSignal,
</span><span class='line'>                                                                self.p1.rac_textSignal,
</span><span class='line'>                                                                self.p2.rac_textSignal
</span><span class='line'>                                                                ] reduce:^id(NSString *name, NSString *p1, NSString *p2){
</span><span class='line'>                                                                    return @(name.length &gt;0 && p1.length&gt;0 && p1 && [p1 isEqualToString:p2]);
</span><span class='line'>                                                                }];
</span></code></pre></td></tr></table></div></figure>


<p>代码用来做表单验证，只有名字长度大于0，并且两次输入密码一致，且长度大于0时才可以点击。</p>

<p>对概念通俗的解释：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ReactiveCocoa是github去年开源的一个项目，是在iOS平台上对FRP的实现。FRP的核心是信号，信号在ReactiveCocoa(以下简称RAC)中是通过RACSignal来表示的，信号是数据流，可以被绑定和传递。
</span><span class='line'>
</span><span class='line'>可以把信号想象成水龙头，只不过里面不是水，而是玻璃球(value)，直径跟水管的内径一样，这样就能保证玻璃球是依次排列，不会出现并排的情况(数据都是线性处理的，不会出现并发情况)。水龙头的开关默认是关的，除非有了接收方(subscriber)，才会打开。这样只要有新的玻璃球进来，就会自动传送给接收方。可以在水龙头上加一个过滤嘴(filter)，不符合的不让通过，也可以加一个改动装置，把球改变成符合自己的需求(map)。也可以把多个水龙头合并成一个新的水龙头(combineLatest:reduce:)，这样只要其中的一个水龙头有玻璃球出来，这个新合并的水龙头就会得到这个球。</span></code></pre></td></tr></table></div></figure>


<p>参考文章:<a href="http://blog.leezhong.com/ios/2013/06/19/frp-reactivecocoa.html">http://blog.leezhong.com/ios/2013/06/19/frp-reactivecocoa.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[享元模式]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/23/xiang-yuan-mo-shi/"/>
    <updated>2014-05-23T16:42:17+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/23/xiang-yuan-mo-shi</id>
    <content type="html"><![CDATA[<p>享元模式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>享元模式(Flyweight Pattern)：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。</span></code></pre></td></tr></table></div></figure>


<p>两个核心英雄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>享元 享元工厂</span></code></pre></td></tr></table></div></figure>


<p>在提到享元模式通常都会提到一个围棋游戏，因为一个围棋里边有300多棋子，如果每个棋子都采用一个新对象会非常占用内存，解决方法就是利用享元模式，提取内部共有属性白色／黑色。外部属性位置，大小（frame）.最终系统管理的棋子对象只有两个。</p>

<p>我在写demo的时候发现如果是把每个棋子都addsubview到self.view上的话，会发现不论获取多少次，最终界面上只有两个棋子。思来想去最终发现采用drawrect的方式，前提是要把frame单独存取出来，比如可以用一个字典NSDictionary解决。</p>

<p>原文链接:<a href="http://blog.csdn.net/lovelion/article/details/7667781">http://blog.csdn.net/lovelion/article/details/7667781</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Isequal == 区别]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/23/isequal-equals-equals-qu-bie/"/>
    <updated>2014-05-23T14:20:42+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/23/isequal-equals-equals-qu-bie</id>
    <content type="html"><![CDATA[<p>事情虽小有的人真愿意去做。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)isEqual:(id)object {  
</span><span class='line'>// By default, if two variables point to the same object in memory, it should always be // equal  
</span><span class='line'>    if (object == self) {  
</span><span class='line'>        return YES;   
</span><span class='line'>    }  
</span><span class='line'>    if (![object isKindOfClass:[MyItem class]]) {   
</span><span class='line'>        return NO;  
</span><span class='line'>    }  
</span><span class='line'>    MyItem *myItem = (MyItem *)object;  
</span><span class='line'>    return [myItem.identifier isEqual:self.identifier];   
</span><span class='line'>}  </span></code></pre></td></tr></table></div></figure>


<p>上边便是isequal的方法内容，可以看出＝＝判断也包含在其中。</p>

<p>原文链接: <a href="http://blog.csdn.net/devday/article/details/7594669">http://blog.csdn.net/devday/article/details/7594669</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CircleLayout]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/23/circlelayout/"/>
    <updated>2014-05-23T10:18:28+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/23/circlelayout</id>
    <content type="html"><![CDATA[<p>今天继续看了下CircleLayout布局。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)path
</span><span class='line'>{
</span><span class='line'>    UICollectionViewLayoutAttributes* attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:path];
</span><span class='line'>    attributes.size = CGSizeMake(ITEM_SIZE, ITEM_SIZE);
</span><span class='line'>    attributes.center = CGPointMake(_center.x + _radius * cosf(2 * path.item * M_PI / _cellCount),
</span><span class='line'>                                    _center.y + _radius * sinf(2 * path.item * M_PI / _cellCount));
</span><span class='line'>    return attributes;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>用三角函数计算求得当前item在圆环上得位置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForInsertedItemAtIndexPath:(NSIndexPath *)itemIndexPath
</span><span class='line'>{
</span><span class='line'>    UICollectionViewLayoutAttributes* attributes = [self layoutAttributesForItemAtIndexPath:itemIndexPath];
</span><span class='line'>    attributes.alpha = 0.0;
</span><span class='line'>    attributes.center = CGPointMake(_center.x, _center.y);
</span><span class='line'>    return attributes;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDeletedItemAtIndexPath:(NSIndexPath *)itemIndexPath
</span><span class='line'>{
</span><span class='line'>    UICollectionViewLayoutAttributes* attributes = [self layoutAttributesForItemAtIndexPath:itemIndexPath];
</span><span class='line'>    attributes.alpha = 0.0;
</span><span class='line'>    attributes.center = CGPointMake(_center.x, _center.y);
</span><span class='line'>    attributes.transform3D = CATransform3DMakeScale(0.1, 0.1, 1.0);
</span><span class='line'>    return attributes;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)performBatchUpdates:(void (^)(void))updates completion:(void (^)(BOOL finished))completion;该方法调用的时候会触发上边两个动画方法
</span><span class='line'>
</span><span class='line'>注意，现在这两个动画方法已经改掉了api名称，由下边两个替代
</span><span class='line'>
</span><span class='line'>- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath *)itemIndexPath{
</span><span class='line'>}
</span><span class='line'>- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDisappearingItemAtIndexPath:(NSIndexPath *)itemIndexPath{
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>原文链接 <a href="http://www.onevcat.com/2012/08/advanced-collection-view/">http://www.onevcat.com/2012/08/advanced-collection-view/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NS_DEPRECATED_IOS]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/22/ns-deprecated-ios/"/>
    <updated>2014-05-22T19:17:20+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/22/ns-deprecated-ios</id>
    <content type="html"><![CDATA[<p>每一个新版本iOS出现之后，开发者会发现有一些方法会被NS_DEPRECATED_IOS（xx,xx）.这个宏定义是什么意思呢？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>前面一个xx表明了这个方法被引入时的iOS版本，后面一个表明它被废弃时的iOS版本。被废弃并不是指这个方法就不存在了，只是意味着我们应当开始考虑将相关代码迁移到新的API上去了。</span></code></pre></td></tr></table></div></figure>


<p>所以可以继续使用。</p>

<p>原文链接 <a href="http://codingobjc.com/blog/2014/02/11/ni-xu-yao-zhi-dao-de-suo-you-guan-yu-ioshe-os-xyi-qi-yong-de-apide-shi-er/">http://codingobjc.com/blog/2014/02/11/ni-xu-yao-zhi-dao-de-suo-you-guan-yu-ioshe-os-xyi-qi-yong-de-apide-shi-er/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CollectionView Details]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/22/collectionview-details/"/>
    <updated>2014-05-22T17:21:04+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/22/collectionview-details</id>
    <content type="html"><![CDATA[<p>今天，真热啊。</p>

<p>看了看苹果官方工程LineLayout,记录下这段代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    -(NSArray*)layoutAttributesForElementsInRect:(CGRect)rect
</span><span class='line'>{
</span><span class='line'>    NSArray* array = [super layoutAttributesForElementsInRect:rect];
</span><span class='line'>    CGRect visibleRect;
</span><span class='line'>    visibleRect.origin = self.collectionView.contentOffset;
</span><span class='line'>    visibleRect.size = self.collectionView.bounds.size;
</span><span class='line'>    
</span><span class='line'>    for (UICollectionViewLayoutAttributes* attributes in array) {
</span><span class='line'>        if (CGRectIntersectsRect(attributes.frame, rect)) {
</span><span class='line'>            CGFloat distance = CGRectGetMidX(visibleRect) - attributes.center.x;
</span><span class='line'>            CGFloat normalizedDistance = distance / ACTIVE_DISTANCE;
</span><span class='line'>            if (ABS(distance) &lt; ACTIVE_DISTANCE) {
</span><span class='line'>                CGFloat zoom = 1 + ZOOM_FACTOR*(1 - ABS(normalizedDistance));
</span><span class='line'>                attributes.transform3D = CATransform3DMakeScale(zoom, zoom, 1.0);
</span><span class='line'>                attributes.zIndex = 1;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return array;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>对方法的看法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>方法调用，通过判断当前item和collectionview可视区域两个的中心间距同item的宽度来进行对比，以决定是否进行transform3D变换。变幻的时候添加了一个比例因子ZOOM_FACTOR，使缩放不会太夸张。</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGPoint)targetContentOffsetForProposedContentOffset: (CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>    //proposedContentOffset是没有对齐到网格时本来应该停下的位置
</span><span class='line'>    CGFloat offsetAdjustment = MAXFLOAT;
</span><span class='line'>    CGFloat horizontalCenter = proposedContentOffset.x + (CGRectGetWidth(self.collectionView.bounds) / 2.0);
</span><span class='line'>    CGRect targetRect = CGRectMake(proposedContentOffset.x, 0.0, self.collectionView.bounds.size.width, self.collectionView.bounds.size.height);
</span><span class='line'>    NSArray* array = [super layoutAttributesForElementsInRect:targetRect];
</span><span class='line'>    
</span><span class='line'>    //对当前屏幕中的UICollectionViewLayoutAttributes逐个与屏幕中心进行比较，找出最接近中心的一个
</span><span class='line'>    for (UICollectionViewLayoutAttributes* layoutAttributes in array) {
</span><span class='line'>        CGFloat itemHorizontalCenter = layoutAttributes.center.x;
</span><span class='line'>        if (ABS(itemHorizontalCenter - horizontalCenter) &lt; ABS(offsetAdjustment)) {
</span><span class='line'>            offsetAdjustment = itemHorizontalCenter - horizontalCenter;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return CGPointMake(proposedContentOffset.x + offsetAdjustment, proposedContentOffset.y);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>对方法的看法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>与上个方法一样，需要求得可是区域的cgrect，通过该参数求出所有的UICollectionViewLayoutAttributes，然后用每个参数里的center和中心点求差比较，比较的算法就是如果当前差数比上一个差的绝对值小就记录下来。
</span><span class='line'>最后返回的应该停下来的点，y不动，x加的当前记录的差值。</span></code></pre></td></tr></table></div></figure>


<p>对UICollectionViewLayoutAttributes的看法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UICollectionViewLayoutAttributes记录了一个元素所有与布局相关联的参数,仅此而已。</span></code></pre></td></tr></table></div></figure>


<p>原文链接：<a href="http://www.onevcat.com/2012/08/advanced-collection-view/">http://www.onevcat.com/2012/08/advanced-collection-view/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5安装老版本模拟器]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/21/xcode5an-zhuang-lao-ban-ben-mo-ni-qi/"/>
    <updated>2014-05-21T08:51:32+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/21/xcode5an-zhuang-lao-ban-ben-mo-ni-qi</id>
    <content type="html"><![CDATA[<p>最近刚刚更新老了Xcode5.1.1，发现只有系统自带的iOS7.1模拟器，对于调试以前的版本，还需要安装老版本的模拟器。系统提供了一种从preference下载的方式，但是模拟器一般都会很大，非常的费劲。于是上网搜到了一种比较快捷的方式。一共3步</p>

<p>1.从老版本Applications/Xcode.app/Contents/Developer/Platforms /iPhoneOS.platform/Developer/SDKs 拷贝Base Sdk到新版本Xcode对应目录下。</p>

<p>2./Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs 对这个路径下进行如上的一次拷贝。</p>

<p>3.关掉Xcode。重新打开系统会自动提示有新的包加入。按照提示做即可。</p>

<p>原文链接：<a href="http://blog.csdn.net/kenera/article/details/12513287">http://blog.csdn.net/kenera/article/details/12513287</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About This Blog]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/20/about-this-blog/"/>
    <updated>2014-05-20T10:54:05+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/20/about-this-blog</id>
    <content type="html"><![CDATA[<p>关于博客
以前就有写博客的，博客地址是<a href="http://yupeiliang110.blog.163.com">http://yupeiliang110.blog.163.com</a>
欢迎大家前来学习交流。现在发现了很多人都用这个octopress 写技术博客，觉得挺好玩的，想试试，经过一天半时间，终于可以写东西了，窃喜，接下来继续改进。
<img src="http://yupliang.github.io/images/222.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[520]]></title>
    <link href="http://yupliang.github.io/blog/2014/05/20/520/"/>
    <updated>2014-05-20T09:18:58+08:00</updated>
    <id>http://yupliang.github.io/blog/2014/05/20/520</id>
    <content type="html"><![CDATA[<p>Dear Cherry,</p>

<pre><code>its 520's day, so be happy. thanks for your supports. as you look this ,it seems that i have finish the blog. still i have to do some other works. anyhow , be happy.
</code></pre>
]]></content>
  </entry>
  
</feed>
